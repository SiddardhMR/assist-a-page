import React, { useState, useRef, useEffect } from 'react';
import { Send, Copy, RotateCcw, X, MessageSquare, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { EmptyState } from '@/components/EmptyState';
import { useAppStore, useActiveFile } from '@/lib/store';
import { cn } from '@/lib/utils';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  citations?: Array<{ page: number; bbox: number[] }>;
}

interface ChatPaneProps {
  className?: string;
}

export function ChatPane({ className }: ChatPaneProps) {
  const { state, dispatch } = useAppStore();
  const activeFile = useActiveFile();
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!input.trim() || !activeFile || isLoading) return;

    const userMessage: Message = {
      id: crypto.randomUUID(),
      type: 'user',
      content: input.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      // Mock assistant response
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const assistantMessage: Message = {
        id: crypto.randomUUID(),
        type: 'assistant',
        content: `Based on the document "${activeFile.name}", I can help you with that question. This is a mock response that would be generated by the AI assistant.`,
        timestamp: new Date(),
        citations: [
          { page: state.currentPage, bbox: [100, 200, 400, 220] }
        ]
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Chat error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const jumpToPage = (page: number) => {
    dispatch({ type: 'SET_PAGE', page });
  };

  const retryMessage = (messageId: string) => {
    // Implement retry logic
    console.log('Retrying message:', messageId);
  };

  if (state.chatCollapsed) {
    return (
      <div className="w-12 bg-card border-l border-border flex flex-col items-center py-4">
        <Button
          variant="ghost"
          size="icon"
          onClick={() => dispatch({ type: 'TOGGLE_CHAT' })}
          className="h-8 w-8"
        >
          <MessageSquare className="h-4 w-4" />
        </Button>
      </div>
    );
  }

  return (
    <aside className={cn(
      "w-chat bg-card border-l border-border flex flex-col",
      className
    )}>
      {/* Header */}
      <div className="p-4 border-b border-border">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <Sparkles className="h-4 w-4 text-primary" />
            <h2 className="font-semibold text-sm">Assistant</h2>
          </div>
          <Button
            variant="ghost"
            size="icon"
            className="h-6 w-6"
            onClick={() => dispatch({ type: 'TOGGLE_CHAT' })}
          >
            <X className="h-3 w-3" />
          </Button>
        </div>

        {/* Context Chips */}
        <div className="flex flex-wrap gap-1">
          {activeFile && (
            <div className="inline-flex items-center gap-1 px-2 py-1 bg-primary/10 text-primary text-xs rounded-md">
              <span className="truncate max-w-[120px]">{activeFile.name}</span>
            </div>
          )}
          {state.selectedText && (
            <div className="inline-flex items-center gap-1 px-2 py-1 bg-accent/10 text-accent-foreground text-xs rounded-md">
              Selected text
            </div>
          )}
          <div className="inline-flex items-center gap-1 px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md">
            Page {state.currentPage}
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto custom-scrollbar p-4 space-y-4">
        {messages.length === 0 ? (
          <EmptyState 
            type="chat"
            title="Start a conversation"
            description="Ask questions about your PDF or select text to get started"
          />
        ) : (
          messages.map((message) => (
            <div
              key={message.id}
              className={cn(
                "group relative",
                message.type === 'user' ? "flex justify-end" : "flex justify-start"
              )}
            >
              <div
                className={cn(
                  "max-w-[85%] rounded-lg px-3 py-2 text-sm",
                  message.type === 'user'
                    ? "bg-primary text-primary-foreground"
                    : "bg-muted text-foreground"
                )}
              >
                <p className="whitespace-pre-wrap">{message.content}</p>
                
                {/* Citations */}
                {message.citations && message.citations.length > 0 && (
                  <div className="mt-2 space-y-1">
                    {message.citations.map((citation, index) => (
                      <button
                        key={index}
                        onClick={() => jumpToPage(citation.page)}
                        className="inline-flex items-center gap-1 px-2 py-1 bg-background/20 hover:bg-background/30 rounded text-xs transition-colors"
                      >
                        Page {citation.page}
                      </button>
                    ))}
                  </div>
                )}
                
                <p className="text-xs opacity-70 mt-1">
                  {message.timestamp.toLocaleTimeString()}
                </p>
              </div>

              {/* Message Actions */}
              <div className="opacity-0 group-hover:opacity-100 transition-opacity ml-2 flex flex-col gap-1">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6"
                  onClick={() => copyToClipboard(message.content)}
                >
                  <Copy className="h-3 w-3" />
                </Button>
                {message.type === 'assistant' && (
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6"
                    onClick={() => retryMessage(message.id)}
                  >
                    <RotateCcw className="h-3 w-3" />
                  </Button>
                )}
              </div>
            </div>
          ))
        )}
        
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-muted rounded-lg px-3 py-2">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                </div>
                <span>Thinking...</span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-border">
        <div className="flex gap-2">
          <Input
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={
              activeFile 
                ? "Ask about this document..." 
                : "Upload a PDF to start chatting"
            }
            disabled={!activeFile || isLoading}
            className="flex-1"
          />
          <Button 
            onClick={handleSendMessage}
            disabled={!input.trim() || !activeFile || isLoading}
            size="icon"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        
        {state.selectedText && (
          <div className="mt-2 p-2 bg-accent/10 rounded-md">
            <p className="text-xs text-muted-foreground mb-1">Selected text:</p>
            <p className="text-sm text-foreground truncate">
              "{state.selectedText}"
            </p>
            <div className="flex gap-1 mt-2">
              <Button variant="outline" size="sm" className="text-xs h-6">
                Ask about this
              </Button>
              <Button variant="outline" size="sm" className="text-xs h-6">
                Summarize
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                className="text-xs h-6"
                onClick={() => dispatch({ type: 'SET_SELECTED_TEXT', text: null })}
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          </div>
        )}
      </div>
    </aside>
  );
}